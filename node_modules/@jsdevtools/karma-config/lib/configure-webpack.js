"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
/**
 * Configures Webpack to bundle test files and their dependencies.
 */
function configureWebpack(config, options) {
    let { transpile } = options;
    let globs = getEntryFileGlobs(options);
    util_1.addPlugin(config, "karma-webpack");
    for (let glob of globs) {
        config.preprocessors = util_1.mergeConfig(config.preprocessors, {
            [glob]: ["webpack"],
        });
    }
    config.webpack = util_1.mergeConfig(config.webpack, {
        mode: "development",
        devtool: "inline-source-map",
    });
    config.webpack.module = util_1.mergeConfig(config.webpack.module, {
        rules: [],
    });
    if (transpile && !util_1.hasWebpackLoader(config.webpack.module.rules, "babel-loader")) {
        config.webpack.module.rules.push({
            test: /\.(js|jsx|mjs)$/,
            use: {
                loader: "babel-loader",
                options: {
                    presets: ["@babel/preset-env"]
                }
            }
        });
    }
    return config;
}
exports.configureWebpack = configureWebpack;
/**
 * Returns the glob patterns of all entry files (tests and fixtures).
 */
function getEntryFileGlobs({ fixtures, tests }) {
    let globs = [];
    for (let patterns of [fixtures, tests]) {
        for (let pattern of patterns) {
            if (typeof pattern === "string") {
                globs.push(pattern);
            }
            else if (pattern.included !== false) {
                globs.push(pattern.pattern);
            }
        }
    }
    return globs;
}
//# sourceMappingURL=configure-webpack.js.map