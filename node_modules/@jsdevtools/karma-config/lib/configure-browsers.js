"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const package_json_1 = require("./package-json");
const util_1 = require("./util");
/**
 * Configures the browsers for the current platform
 */
function configureBrowsers(config, options) {
    if (config.browsers) {
        // The user has already specified the browsers
        return config;
    }
    let { CI, browsers: { chrome, firefox, safari, edge, ie } } = options;
    let browsers = config.browsers = [];
    chrome && util_1.addPlugin(config, "karma-chrome-launcher");
    firefox && util_1.addPlugin(config, "karma-firefox-launcher");
    safari && util_1.addPlugin(config, "karma-safari-launcher");
    edge && util_1.addPlugin(config, "karma-edge-launcher");
    ie && util_1.addPlugin(config, "karma-ie-launcher");
    if (CI) {
        chrome && browsers.push("ChromeHeadless");
        firefox && browsers.push("FirefoxHeadless");
    }
    else {
        chrome && browsers.push("Chrome");
        firefox && browsers.push("Firefox");
    }
    if (canRunSauceConnect(options)) {
        configureSauceLabs(config, options);
    }
    else {
        safari && browsers.push("Safari");
        edge && browsers.push("Edge");
        ie && browsers.push("IE");
    }
    return config;
}
exports.configureBrowsers = configureBrowsers;
/**
 * Determines whether the system meets the requirements for running the Sauce Connect proxy.
 *
 * @see https://github.com/karma-runner/karma-sauce-launcher
 */
function canRunSauceConnect(options) {
    let username = process.env.SAUCE_USERNAME;
    let accessKey = process.env.SAUCE_ACCESS_KEY;
    return Boolean(options.linux && username && accessKey);
}
/**
 * Configures Karma to use Sauce Labs for Windows browser testing.
 * Returns `false` if Sauce Labs credentials are not present.
 *
 * @see https://github.com/karma-runner/karma-sauce-launcher
 */
function configureSauceLabs(config, options) {
    let { browsers: { safari, edge, ie } } = options;
    let browsers = config.browsers;
    if (!(safari || edge || ie)) {
        // No need to run tests on Sauce Labs
        return config;
    }
    util_1.addPlugin(config, "karma-sauce-launcher");
    let buildNumber = process.env.BUILD_NUMBER ||
        process.env.BUILD_TAG ||
        process.env.CI_BUILD_NUMBER ||
        process.env.CI_BUILD_TAG ||
        process.env.TRAVIS_BUILD_NUMBER ||
        process.env.CIRCLE_BUILD_NUM ||
        process.env.DRONE_BUILD_NUMBER ||
        process.env.GITHUB_RUN_NUMBER ||
        Date.now();
    let pkg = package_json_1.readPackageJson();
    config.reporters.push("saucelabs");
    config = util_1.mergeConfig(config, {
        logLevel: "debug",
        // concurrency: 1,
        captureTimeout: 60000,
        browserDisconnectTolerance: 5,
        browserDisconnectTimeout: 60000,
        browserNoActivityTimeout: 60000,
    });
    config.sauceLabs = util_1.mergeConfig(config.sauceLabs, {
        build: `${pkg.name} v${pkg.version} Build #${buildNumber}`,
        testName: `${pkg.name} v${pkg.version}`,
        tags: [pkg.name],
    });
    config.customLaunchers = config.customLaunchers || {};
    if (safari) {
        browsers.push("Safari_SauceLabs");
        config.customLaunchers.Safari_SauceLabs = util_1.mergeConfig(config.customLaunchers.Safari_SauceLabs, {
            base: "SauceLabs",
            platform: "MacOS 10.15",
            browserName: "safari",
        });
    }
    if (edge) {
        browsers.push("Edge_SauceLabs");
        config.customLaunchers.Edge_SauceLabs = util_1.mergeConfig(config.customLaunchers.Edge_SauceLabs, {
            base: "SauceLabs",
            platform: "Windows 10",
            browserName: "microsoftedge",
            version: "18.17763",
        });
    }
    if (ie) {
        browsers.push("IE_SauceLabs");
        config.customLaunchers.IE_SauceLabs = util_1.mergeConfig(config.customLaunchers.IE_SauceLabs, {
            base: "SauceLabs",
            platform: "Windows 10",
            browserName: "internet explorer"
        });
    }
    return config;
}
//# sourceMappingURL=configure-browsers.js.map